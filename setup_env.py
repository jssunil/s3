#!/usr/bin/env python3
"""
BMW Configurator Environment Setup Helper
This script helps users set up their .env file with the necessary API keys.
"""

import os
import sys

def create_env_file():
    """Create a .env file with the necessary environment variables."""
    
    print("🚗 BMW Configurator Environment Setup")
    print("=" * 50)
    
    # Check if .env already exists
    if os.path.exists('.env'):
        response = input("⚠️  .env file already exists. Do you want to overwrite it? (y/N): ")
        if response.lower() != 'y':
            print("Setup cancelled.")
            return
    
    print("\nTo use AI suggestions, you need a Google Gemini API key.")
    print("📝 Steps to get your API key:")
    print("1. Go to https://makersuite.google.com/app/apikey")
    print("2. Sign in with your Google account")
    print("3. Click 'Create API Key'")
    print("4. Copy the generated API key")
    print()
    
    # Get API key from user
    api_key = input("🔑 Enter your Gemini API key (or press Enter to skip): ").strip()
    
    # Get optional secret key
    secret_key = input("🔒 Enter a custom secret key for Flask (or press Enter for default): ").strip()
    if not secret_key:
        secret_key = "bmw-configurator-secret-key-2024"
    
    # Create .env content
    env_content = f"""# BMW Car Configurator Environment Variables
# Generated by setup_env.py

# Google Gemini API Key (Required for AI suggestions)
# Get your API key from: https://makersuite.google.com/app/apikey
GEMINI_API_KEY={api_key if api_key else 'your_gemini_api_key_here'}

# Flask Configuration
FLASK_ENV=development
FLASK_DEBUG=True
SECRET_KEY={secret_key}

# Optional: Database URL (if you add database support later)
# DATABASE_URL=sqlite:///bmw_configurator.db
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        
        print("\n✅ .env file created successfully!")
        
        if not api_key:
            print("\n⚠️  Note: You didn't provide a Gemini API key.")
            print("   AI suggestions won't work until you add your API key to the .env file.")
        else:
            print("\n🎉 Your environment is ready!")
            print("   You can now run the application with: python app.py")
        
        print(f"\n📁 .env file location: {os.path.abspath('.env')}")
        
    except Exception as e:
        print(f"\n❌ Error creating .env file: {e}")
        return False
    
    return True

def check_dependencies():
    """Check if required Python packages are installed."""
    print("\n🔍 Checking dependencies...")
    
    required_packages = [
        'flask',
        'requests', 
        'beautifulsoup4',
        'google-generativeai',
        'flask-cors',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"✅ {package}")
        except ImportError:
            print(f"❌ {package}")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n⚠️  Missing packages: {', '.join(missing_packages)}")
        print("Install them with: pip install -r requirements.txt")
        return False
    else:
        print("\n✅ All dependencies are installed!")
        return True

def main():
    """Main setup function."""
    print("Starting BMW Configurator setup...\n")
    
    # Check dependencies first
    deps_ok = check_dependencies()
    
    # Create .env file
    env_ok = create_env_file()
    
    print("\n" + "=" * 50)
    
    if deps_ok and env_ok:
        print("🎉 Setup complete! You can now run the application:")
        print("   python app.py")
    else:
        print("⚠️  Setup completed with issues. Please resolve them before running the app.")
    
    print("\n📚 For more information, see README.md")

if __name__ == "__main__":
    main()
